{"version":3,"sources":["sun.png","cloudy.png","components/date.jsx","App.js","reportWebVitals.js","index.js"],"names":["DateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Date","api","App","useState","query","setQuery","weather","setWeather","className","main","temp","Math","round","name","src","sun","cloud","alt","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","clouds","all","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAAe,G,MAAA,IAA0B,iCCA1B,MAA0B,mC,OCqB1BA,EAnBK,WAYhB,OACA,8BAZgB,SAACC,GACb,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAIjCH,CAAQ,IAAIK,SCVfC,EACC,mCADDA,EAEE,2CA+FOC,MA3Ff,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAgBA,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACdH,EAAQG,KAAKC,KAAO,GAAM,WAAqB,MAFnD,SAGE,iCAC2B,oBAAhBJ,EAAQG,KACjB,8BACE,sBAAKD,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,sBAAMA,UAAU,eAAhB,SAAgCG,KAAKC,MAAMN,EAAQG,KAAKC,UAE1D,sBAAKF,UAAU,cAAf,UACE,sBAAKA,UAAU,YAAf,UACI,sBAAMA,UAAU,aAAhB,SAA8BF,EAAQO,OACtC,sBAAML,UAAU,gBAAhB,SACE,cAAC,EAAD,SAGN,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,aAAaM,IAA6B,oBAAhBR,EAAQG,KACrCH,EAAQG,KAAKC,KAAO,GAAMK,EAAMC,EAAQ,MAAOC,IAAI,UAC/D,sBAAMT,UAAU,qBAAhB,SAAsCF,EAAQA,QAAQ,GAAGG,kBAM9D,GAEL,sBAAKD,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBACAU,KAAK,OACLV,UAAU,aACVW,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOC,QACjCA,MAASnB,EACToB,WAnDK,SAAAC,GACK,UAAdA,EAAMC,KACRC,MAAM,GAAD,OAAI1B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzD2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACHxB,EAAWwB,GACV1B,EAAS,IACT2B,QAAQC,IAAIF,WA+Ca,oBAAhBzB,EAAQG,KACjB,8BAEE,sBAAKD,UAAU,WAAf,UACE,iDACA,sBAAKA,UAAU,WAAf,UACE,mBAAGA,UAAU,OAAb,mBACA,8BAAIF,EAAQ4B,OAAOC,IAAnB,UAEF,sBAAK3B,UAAU,WAAf,UACE,mBAAGA,UAAU,OAAb,sBACA,8BAAIF,EAAQG,KAAK2B,SAAjB,UAEF,sBAAK5B,UAAU,WAAf,UACE,mBAAGA,UAAU,OAAb,kBACA,8BAAIF,EAAQ+B,KAAKC,MAAjB,aAEF,sBAAK9B,UAAU,WAAf,UACE,mBAAGA,UAAU,OAAb,kBACA,4CAIP,YClFM+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5593ba2f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sun.6d48da50.png\";","export default __webpack_public_path__ + \"static/media/cloudy.a6d0b7d8.png\";","import React from 'react'\r\n\r\nconst DateBuilder = ()=> {\r\n    const getDate = (d) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n                \r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n    \r\n        return `${day} ${date} ${month} ${year}`;\r\n    }\r\n    return ( \r\n    <div>\r\n        {getDate(new Date())}\r\n    </div> \r\n    );\r\n}\r\n \r\nexport default DateBuilder;\r\n","import './App.css';\nimport React, {useState} from 'react';\nimport sun from './sun.png'\nimport cloud from './cloudy.png'\nimport DateBuilder from './components/date';\n\nconst api = {\n  key: \"714d8cb3c78c99c70f5870c32bd48bb3\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nfunction App() {\n  \n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  \n  const search = event => {\n    if (event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => \n        {setWeather(result); \n          setQuery('');\n          console.log(result);})\n        }\n      }\n \n \n\n\n  return (\n    <div className={\n      (typeof weather.main != \"undefined\") ? \n      ((weather.main.temp < 16) ? 'app warm' : 'app'): 'app'}>\n      <main>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"info\">\n            <div className=\"info__left\">\n              <span className=\"info__degree\">{Math.round(weather.main.temp)}</span>\n            </div>\n            <div className=\"info__right\">\n              <div className=\"info__row\">\n                  <span className=\"info__city\">{weather.name}</span>\n                  <span className=\"info__time mg\">\n                    <DateBuilder />\n                  </span>\n              </div>\n              <div className=\"info__row\">\n                  <img className=\"info__logo\" src={(typeof weather.main != \"undefined\") ? \n                            ((weather.main.temp > 16) ? sun : cloud): 'app'} alt=\"sunny\" />\n                  <span className=\"info__condition mg\">{weather.weather[0].main}</span>\n              </div>\n            </div>\n          </div>\n          \n        </div>\n        ) : ('')}\n        \n        <div className=\"right-box\">\n          <div className=\"search-box\">\n            <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search region...\"\n            onChange={e => setQuery(e.target.value)}\n            value = {query}\n            onKeyPress={search}\n            />\n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n          <div>\n           \n            <div className=\"list-box\">\n              <h2>Weather details</h2>\n              <div className=\"list-row\">\n                <p className=\"text\">Cloud</p>\n                <p>{weather.clouds.all}%</p>\n              </div>\n              <div className=\"list-row\">\n                <p className=\"text\">Humidity</p>\n                <p>{weather.main.humidity}%</p>\n              </div>\n              <div className=\"list-row\">\n                <p className=\"text\">Wind</p>\n                <p>{weather.wind.speed}km/h</p>\n              </div>\n              <div className=\"list-row\">\n                <p className=\"text\">Rain</p>\n                <p>0mm</p>\n              </div>\n          </div>\n          </div>\n    ) : ('')}\n          </div>\n\n      </main>\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}